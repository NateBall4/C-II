#include <iostream>
#include <conio.h>
using namespace std;

#define BAD_INDEX -1

// f(0) = 0; f(1) = 1; f(2) = 1
// f(n) = f(n - 1) + f(n - 2)
int fibonacciIterative(int);
int fibonacciRecursive(int);

int main() {
	int i = 0;

	for (i = 0; i < 10; i++) {
		cout << i << "! = " << fibonacciRecursive(i) << endl;
		cout << i << "! = " << fibonacciIterative(i) << endl;
	}

	_getch();
	return 0;
}

// student implementation
int fibonacciIterative(int fibMe) {
	// If the requested index isn't valid.
	if (fibMe < 0) {
		return BAD_INDEX;
	}
	// f(0) = 0
	else if (fibMe == 0) {
		return 0;
	}
	// f(1) = 1
	else if (fibMe == 1) {
		return 1;
	}
	// If the requested index is higher than 1, loop to determine
	//  the fibonacci value that corresponds to the requested
	//  index.
	else {
		int fibMinusTwo = 0;
		int fibMinusOne = 1;
		int newFib = 0;

		for (int i = 2; i <= fibMe; i++) {
			newFib = fibMinusTwo + fibMinusOne;
			fibMinusTwo = fibMinusOne;
			fibMinusOne = newFib;
		}

		return newFib;
	}

	return BAD_INDEX;
}

int fibonacciRecursive(int fibMe) {
	if (fibMe == 0) {
		return 0;
	}
	else if (fibMe == 1) {
		return 1;
	}
		return fibonacciRecursive(fibMe - 1) + fibonacciRecursive(fibMe - 2);
}
